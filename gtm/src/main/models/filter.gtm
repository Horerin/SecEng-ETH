Window Filter{

    Table Table_T{
        //TEST/DONE: show filtered courses
        Set(Course) rows := [Course.allInstances()]
        Course selected := [null]
        columns {
            ['Name'] : Label name {
                event onView (text){
                    try{
                        text := [$Table_T.row$.name]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                    //DONE: show the course name
                }
            }
            ['Professor'] : Label prof {
                event onView (text){
                    try{
                        text := [$Table_T.row$.professor.name.concat(' ').concat($Table_T.row$.professor.surname)]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                    //DONE: show the course professor's name and surname
                }
            }
            ['Department'] : Label dept {
                event onView (text){
                    try{
                        text := [$Table_T.row$.belongingTo.name]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                    //DONE: show the course department
                }
            }
            ['Current students no'] : Label students {
                event onView (text){
                    try{
                        text := [$Table_T.row$.currStudents->size().toString()]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                    //DONE: show the current number of students in the course
                }
            }
            ['Available student places'] : Label limit {
                event onView (text){
                    try{
                        text := [($Table_T.row$.maxCapacity - $Table_T.row$.currStudents->size()).toString()]
                    } catch (SecurityException){
                        text := ['RESTRICTED']
                    }
                    //DONE: show the current available student places in the course 
                }
            }
            ['Current TA no'] : Label ta {
                event onView (text){
                    try{
                        text := [($Table_T.row$.staff->size() - 1).toString()]  // -1 (Prof is included in Staff association)
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                    //DONE: show the current number of TAs in the course 
                }
            }
            ['Available TA places'] : Label talimit {
                event onView (text){
                    try{
                        text := [(($Table_T.row$.maxCapacity.div(20)) - ($Table_T.row$.staff->size() - 1)).toString()]  // -1 (Prof is included in Staff association)
                    } catch (SecurityException) {
                        text := ['RESTRICTED']
                    }
                    //DONE: show the current available TA places in the course 
                }
            }
        }
    }
    ComboBox View_CB {
        //DONE: show existing views to choose from
        Set(View) rows := [View.allInstances()]
        View selected := [null]
        Label views { 
            event onView (text) {
                //DONE: show view
                text := [$View_CB.row$.name]                
            }
        }
    }
    Button Apply_B{
        String text := ['Apply view']
        Set (Course) resultCourses := [null]
        
        // Loop vars
        String attrS := [null]
        Integer attrInt := [null]
        event onClick{
            //TEST/DONE: filter the list of courses according to the selected view
            if [not($View_CB.selected$.oclIsUndefined())] {       
                resultCourses := [Course.allInstances()]    // [$Table_T.rows$]    // Start with all courses and filter out per course
                foreach f in [$View_CB.selected$.filters] { // Loop over the filters in the activated View
                    foreach c in [$resultCourses$] {
                        // 2 vars

                        if [($f$.attribute = FAttribute::COURSENAME)] {
                            attrS := [$c$.name]
                        }
                        if[$f$.attribute = FAttribute::PROFNAME]{
                            attrS := [$c$.professor.name]
                        }
                        if[$f$.attribute = FAttribute::DEPTNAME] {
                            attrS := [$c$.belongingTo.name]
                        }
                        if[$f$.attribute = FAttribute::ATTENDINGSTUDS]{
                            attrInt := [$c$.currStudents->size()]
                        }
                        if[$f$.attribute = FAttribute::MAXSTUDS]{
                            attrInt := [$c$.maxCapacity]
                        }
                        if[$f$.attribute = FAttribute::MAXSTUDS]{
                            attrInt := [$c$.maxCapacity]
                        }
                        if[$f$.attribute = FAttribute::TEACHINGTAS]{
                            attrInt := [$c$.staff->size() - 1]                                                        
                        }
                        if[$f$.attribute = FAttribute::MAXTAS]{
                            attrInt := [($c$.maxCapacity->size().div(20)) - ($c$.staff->size() - 1)]                                                        
                        }

                        // APPLY FILTER BASED ON VAR TYPE
                        // Int attribute:
                        if [$attrS$.oclIsUndefined()]{
                           // Dispatch on operator
                            if[$f$.operator = FOperator::EQ]{
                               if[$attrInt$ <> $f$.parameter.toInteger()]{
                                    resultCourses := [$resultCourses$->excluding($c$)]   
                               }
                            }
                            if[$f$.operator = FOperator::NEQ]{
                                if[$attrInt$ = $f$.parameter.toInteger()]{
                                    resultCourses := [$resultCourses$->excluding($c$)]   
                               }
                            }
                            if[$f$.operator = FOperator::SM]{
                               if[$attrInt$ >= $f$.parameter.toInteger()]{
                                   resultCourses := [$resultCourses$->excluding($c$)]   
                                }
                            }
                            if[$f$.operator = FOperator::SMQ]{
                               if[$attrInt$ > $f$.parameter.toInteger()]{
                                   resultCourses := [$resultCourses$->excluding($c$)]   
                                }
                            }
                            if[$f$.operator = FOperator::GT]{
                               if[$attrInt$ <= $f$.parameter.toInteger()]{
                                   resultCourses := [$resultCourses$->excluding($c$)]   
                                }
                            }
                            if[$f$.operator = FOperator::GTQ]{
                               if[$attrInt$ < $f$.parameter.toInteger()]{
                                   resultCourses := [$resultCourses$->excluding($c$)]   
                                }
                            }
                        }
                        // String attribute:
                        if [$attrInt$.oclIsUndefined()]{
                            if[$f$.operator = FOperator::EQ]{
                               if[$attrS$ <> $f$.parameter]{
                                    resultCourses := [$resultCourses$->excluding($c$)]   
                               }
                            }
                            if[$f$.operator = FOperator::NEQ]{
                                if[$attrS$ = $f$.parameter]{
                                    resultCourses := [$resultCourses$->excluding($c$)]   
                               }
                            }                            
                        }
                        // Reset the loopvars
                        attrS := [null]
                        attrInt := [null]
                    }
                }
                Table_T.rows := [$resultCourses$]
                resultCourses := [null]
            } else {
                Table_T.rows := [Course.allInstances()]
                notification(['INFO'], ['Applying the default View (no filters)'], [500])
            }     
        }
    }

    Button Edit_B{
        String text := ['Edit View']
        event onClick{
            //DONE: open the View window to edit the selected view
            if [not($View_CB.selected$.oclIsUndefined())] {
                open View(caller:[$Filter.caller$], role:[$Filter.caller$.role], entity:[$View_CB.selected$]) 
            } else {
                notification(['ERROR'], ['Please select a View to edit'], [500])
            }
        }
    }
    Label Name_L{
        String text := ['View Name:']
    }
    TextField Name_TF{
        String text := [null]
    }
    Button Create_B{
        String text := ['Create View']
        event onClick{
            //DONE: create a view with a name from the TF above
            if [(not $Name_TF.text$.oclIsUndefined())] {
                try {
                    if [View.allInstances()->forAll(v|v.name<>$Name_TF.text$)]{
                        v := new View
                        [$v$.name]:=[$Name_TF.text$]
                        View_CB.rows := [null]
                        reevaluate View_CB.rows
                        
                        Name_TF.text := [null]
                    } else {
                        notification(['Error'], ['View name already exists'],[500])
                    }
                } catch (SecurityException) {
                    notification(['Error'],['Not allowed'],[500])
                }
            } else {
                notification(['Error'], ['Please fill in a name for the view'], [500])
            }    
        }
    }
    Button Back_B{
        String text := ['Back']
        event onClick{
            back
        }
    }
}