Window View{
    View entity

    Label Name_L{
        String text := ['View Name:']
    }
    TextField Name_TF{
        String text := [$View.entity$.name]
        //TEST: view name to edit
    }

    Label Filters_L{
        String text := ['Filters:']
    }

    Table Filters_T{
        //TODO: Show all filters from the view
        //NOTE: 'Role' below added for compilation purposes
        //      replace it with the appropriate type
        Set(Filter) rows := [Filter.allInstances()]
        Filter selected := [null]
        columns {
            ['Attribute'] : Label attr {
                event onView (text){
                    text := [$Filters_T.row$.attribute.name()]
                    //TEST: show the attribute
                }
            }
            ['Operator'] : Label op {
                event onView (text){
                    text := [$Filters_T.row$.operator.name()]
                    //TEST: show the operation
                }
            }
            ['Parameter'] : Label param {
                event onView (text){
                    text := [$Filters_T.row$.parameter]
                    //TEST: show the parameter
                }
            }
        }
    }
    Button Delete_B{
        String text := ['Delete filter']
        event onClick{
            //TODO: Delete selected filter
            if [(not $Filters_T.selected$.oclIsUndefined())]{
                try {
                    [$Filters_T.selected$.view.filters] -= [$Filters_T.selected$]   // Remove association end View->Filter
                    delete [$Filters_T.selected$]

                    Filters_T.rows := [null]
                    reevaluate Filters_T.rows

                    notification(['Success'],['Filter Deleted'],[500])
                } catch (SecurityException){
                    notification(['ERROR'], ['Not allowed'], [500])
                }
            } else {
                notification(['ERROR'], ['Please select a filter to delete'], [500])
            }
        }   
    }
    Label Add_L{
        String text := ['Add filter:']
    }
    ComboBox Attribute_CB {
        //TEST: show attributes
        Set(FAttribute) rows := [FAttribute.allInstances()]
        FAttribute selected := [null]
        Label attrs { 
            event onView (text) {
                text := [$Attribute_CB.row$.name()]
                //TEST: show attribute
            }
        }
    }
    ComboBox Op_CB {
        //TEST: show operations -> TODO: filter on integer/string attribute!
        Set(FOperator) rows  := [FOperator.allInstances()]
        FOperator selected
        Label ops { 
            event onView (text) {
                text := [$Op_CB.row$.name()]
                //TEST: show operation
            }
        }
    }
    TextField Param_TF {
        String text := [null]
    }   
    Button Add_B {  // TODO: association end with view to create!
        String text := ['Add Filter']
        event onClick{
            if[(not $Attribute_CB.selected$.oclIsUndefined())
                and (not $Op_CB.selected$.oclIsUndefined())
                and (not $Param_TF.text$.oclIsUndefined())] {
                 try {
                        // Check if the filter already exists by checking attributeXoperatorXparameter
                    if [Filter.allInstances()->forAll(f|(f.attribute <> $Attribute_CB.selected$)
                            or (f.operator <> $Op_CB.selected$)
                            or (f.parameter <> $Param_TF.text$))] {
                                f := new Filter
                                [$f$.attribute] := [$Attribute_CB.selected$]
                                [$f$.operator] := [$Op_CB.selected$]
                                [$f$.parameter] := [$Param_TF.text$]

                                // Create association-ends
                                [$View.entity$.filters] += [$f$]
                                [$f$.view] := [$View.entity$]

                                notification(['Success'], ['Filter Created'], [500])
                                
                                Filters_T.rows := [null]
                                reevaluate Filters_T.rows
                                Attribute_CB.selected := [null]
                                Op_CB.selected := [null]
                                Param_TF.text := [null]
                                
                    } else {
                        notification(['ERROR'], ['Filter already exists'], [500])
                    }                 
                } catch (SecurityException) {
                    notification(['ERROR'], ['Not allowed'], [500])
                }
            } else {
                notification(['ERROR'], ['Not all required fields are filled in'], [500])
            }

            //DONE: Add a new filter    
        }   
    }
    Button Back_B{
        String text := ['Back']
        event onClick{
            back
        }
    }
}