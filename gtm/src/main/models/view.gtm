Window View{
    View entity
    // TODO?? @Michael: do we need to provide a way to edit the name of a filter? because there is no button to save changes...
    Label Name_L{
        String text := ['View Name:']
    }
    TextField Name_TF{
        String text := [$View.entity$.name]
        //DONE: view name to edit <<< (not editing button available)
    }
    Button Update_name{
        String text := ['Update']
        event onClick{
            try {
                [$View.entity$.name] := [$Name_TF.text$]
                notification(['Success'],['Name updated'],[500])
            } catch (SecurityException){
                notification(['ERROR'], ['Not allowed'], [500])
            }
            
        }   
    }

    Label Filters_L{
        String text := ['Filters:']
    }

    Table Filters_T{
        //DONE: Show all filters from the view
        Set(Filter) rows := [$View.entity$.filters]
        Filter selected := [null]
        columns {
            ['Attribute'] : Label attr {
                event onView (text){
                    text := [$Filters_T.row$.attribute.name()]
                    //TEST: show the attribute
                }
            }
            ['Operator'] : Label op {
                event onView (text){
                    text := [$Filters_T.row$.operator.name()]
                    //TEST: show the operation
                }
            }
            ['Parameter'] : Label param {
                event onView (text){
                    text := [$Filters_T.row$.parameter]
                    //TEST: show the parameter
                }
            }
        }
    }
    Button Delete_B{
        String text := ['Delete filter']
        event onClick{
            //DONE: Delete selected filter
            if [(not $Filters_T.selected$.oclIsUndefined())]{
                try {
                    [$Filters_T.selected$.view.filters] -= [$Filters_T.selected$]   // Remove association end View->Filter
                    delete [$Filters_T.selected$]

                    Filters_T.rows := [null]
                    reevaluate Filters_T.rows

                    notification(['Success'],['Filter Deleted'],[500])
                } catch (SecurityException){
                    notification(['ERROR'], ['Not allowed'], [500])
                }
            } else {
                notification(['ERROR'], ['Please select a filter to delete'], [500])
            }
        }   
    }
    Label Add_L{
        String text := ['Add filter:']
    }
    ComboBox Attribute_CB {
        //DONE: show attributes
        Set(FAttribute) rows := [FAttribute.allInstances()]
        FAttribute selected := [null]
        Label attrs { 
            event onView (text) {
                text := [$Attribute_CB.row$.name()]
                //TEST: show attribute
            }
        }
    }
    ComboBox Op_CB {
        //DONE: show operations
        Set(FOperator) rows  := [FOperator.allInstances()]          
        FOperator selected
        Label ops { 
            event onView (text) {   
                //if[$Op_CB.row$.name() = ['EQ']]
                text := [$Op_CB.row$.name()]                
                
            }
        }
    }
    TextField Param_TF {
        String text := [null]
    }   
    Button Add_B {
        String text := ['Add Filter']
        event onClick{
        // DONE
            if[($Param_TF.text$.toInteger().oclIsInvalid())] {
                notification(['ERROR'], ['Input must be Integer!'], [500])
            } else if[(not $Attribute_CB.selected$.oclIsUndefined())
                and (not $Op_CB.selected$.oclIsUndefined())
                and (not ($Param_TF.text$ = null))] {
                 try {
                    // check if AttributeXoperator is valid 
                    // String attributes can only have EQ and NEQ as operator
                    if [((($Attribute_CB.selected$ = FAttribute::COURSENAME) or
                         ($Attribute_CB.selected$ = FAttribute::PROFNAME) or 
                         ($Attribute_CB.selected$ = FAttribute::DEPTNAME)) and
                         (($Op_CB.selected$ = FOperator::EQ) or
                         ($Op_CB.selected$ = FOperator::NEQ))) or                    
                        (($Attribute_CB.selected$ = FAttribute::ATTENDINGSTUDS) or 
                            ($Attribute_CB.selected$ = FAttribute::MAXSTUDS) or 
                            ($Attribute_CB.selected$ = FAttribute::TEACHINGTAS) or 
                            ($Attribute_CB.selected$ = FAttribute::MAXTAS))]  // Int attributes can have any operator
                    {
                            // Check if the filter already exists by checking attributeXoperatorXparameter
                        if [Filter.allInstances()->forAll(f|(f.attribute <> $Attribute_CB.selected$)
                                or (f.operator <> $Op_CB.selected$)
                                or (f.parameter <> $Param_TF.text$))] {
                                    f := new Filter
                                    [$f$.attribute] := [$Attribute_CB.selected$]
                                    [$f$.operator] := [$Op_CB.selected$]
                                    [$f$.parameter] := [$Param_TF.text$]

                                    // Create association-ends
                                    [$View.entity$.filters] += [$f$]
                                    [$f$.view] := [$View.entity$]

                                    notification(['Success'], ['Filter Created'], [500])

                                    Filters_T.rows := [null]
                                    reevaluate Filters_T.rows
                                    Attribute_CB.selected := [null]
                                    Op_CB.selected := [null]
                                    Param_TF.text := [null]

                        } else {
                            notification(['ERROR'], ['Filter already exists'], [500])
                        }
                    } else {
                        notification(['ERROR'], ['Selected operation not appropriate for selected attribute'], [500])
                    }
                } catch (SecurityException) {
                    notification(['ERROR'], ['Not allowed'], [500])
                }
            } else {
                notification(['ERROR'], ['Not all required fields are filled in'], [500])
            }

            //DONE: Add a new filter    
        }   
    }
    Button Back_B{
        String text := ['Back']
        event onClick{
            back
        }
    }
}