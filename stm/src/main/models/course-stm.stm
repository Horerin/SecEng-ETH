
// TO ASK: can we leave entities/attributes that are protected by GUI on fullAccess?

role STUDENT {
    Person{
        read(name) constrainedBy [self.role = Role::PROFESSOR or self = caller]
        update(name) constrainedBy [self = caller]
        read(surname) constrainedBy [self.role = Role::PROFESSOR or self = caller]     
        update(surname) constrainedBy [self = caller]
        read(username) constrainedBy [self = caller]
        read(password) constrainedBy [self = caller]
        update(password) constrainedBy [self = caller]
        read(role) constrainedBy [self.role = Role::PROFESSOR or self = caller]    
        read(belongs) constrainedBy [self.role = Role::PROFESSOR or self = caller]

        add(currCourses) constrainedBy [ self = caller and
                    (target.course.currStudents->size() <= target.course.maxCapacity)]  // if we use '<', maximum "maxCapacity-1" is allowed

        read(currCourses)
        read(pastCourses)
    }
    Course{
       read(name)
       read(maxCapacity)
       read(belongingTo) // Department
       read(professor)

       read(currStudents)
       add(currStudents) constrainedBy [
            self.currStudents.student->excludes(caller) and
            self.pastStudents.student->excludes(caller)]
    }
    Department{
        read(name)
    }
    FinalGrade{
        read(value)
        read(student)
        read(course)
    }
    ProvisionalGrade{
        create
        read(course)
        read(student)
        update(student)
    }
    TeachRequest{
                
    }
}
role STAFF {
    Person{
        read(name)
        update(name) constrainedBy [self = caller]
        read(surname)
        update(surname) constrainedBy [self = caller]
        read(username) constrainedBy [self = caller]
        read(password) constrainedBy [self = caller]
        update(password) constrainedBy [self = caller]
        read(role)
        read(belongs)

        read(currCourses)
        read(pastCourses)
    }
    Course{
        read(name)
        read(maxCapacity)
        read(professor)
        read(belongingTo) // Department
        
        read(staff) constrainedBy [self.staff->includes(caller)]    // It is not necessary to make professors invisible, as any staff member can see the administering professor of each course
        read(currStudents) constrainedBy [self.staff->includes(caller)]
        read(pastStudents) constrainedBy [self.staff->includes(caller)]

    }
    Department{
        read(name)
    }
    FinalGrade{
        read(student), read(course), read(value) constrainedBy [
            caller.teaches->includes(self.course)]       
    }
    ProvisionalGrade{
        read(student), read(course), read(value),
        update(value) constrainedBy [
            caller.teaches->includes(self.course)]
    }
    TeachRequest{        
    }
}
role TA extends STAFF {
    Person{
         
    }
    Course{

    }
    Department{
       
    }
    FinalGrade{
   
    }
    ProvisionalGrade{

    }
    TeachRequest{
        create
        update(ta)        
        // Professor is included in staff => we need to subtract with 1
        // If TA is already teaching this course, no request for this course can be send
        // If TA already has a request pending for this course, TA cannot send another request
        update(course) constrainedBy [(value.staff->size()-1 <= value.maxCapacity.div(20)) and
               value.staff->excludes(caller) and
               value.taRequests.ta->excludes(caller)]        
    }


}
role PROFESSOR extends STAFF {
    Person{
        add(administers), add(teaches) constrainedBy [self = caller]
    }
    Course{
        create
        update(professor) constrainedBy [value = caller]
        update(name), update(maxCapacity), add(staff) constrainedBy [self.professor = caller] 
        
        
        update(belongingTo) constrainedBy [self.professor.belongs = value]      
                
    }   
    Department{
        add(offers) constrainedBy [self = caller.belongs] // A prof can only add a course to a department he belongs too
    }
    FinalGrade{
        fullAccess
    }
    ProvisionalGrade{
        fullAccess
    }
    TeachRequest{
    }

}
role ADMIN {
    Person{
        fullAccess
    }
    Course{
        fullAccess
    }
    Department{ 
        fullAccess
    }
    FinalGrade{
        fullAccess
    }
    ProvisionalGrade{
        fullAccess
    }
    TeachRequest{
        fullAccess
    }
}